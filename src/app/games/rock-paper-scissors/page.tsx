'use client'

import { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { FaHandRock, FaHandPaper, FaHandScissors, FaSync } from 'react-icons/fa';
import { toast, Toaster } from 'react-hot-toast';
import ModalPortal from '@/components/ModalPortal';
import { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } from '@google/generative-ai';
import Skeleton from 'react-loading-skeleton';
import 'react-loading-skeleton/dist/skeleton.css';
import { createClient } from '@supabase/supabase-js';

type Choice = 'b√∫a' | 'k√©o' | 'bao';
type GameResult = 'th·∫Øng' | 'thua' | 'h√≤a' | null;

const choices: Choice[] = ['k√©o', 'b√∫a', 'bao'];

const choiceIcons = {
    b√∫a: FaHandRock,
    k√©o: FaHandScissors,
    bao: FaHandPaper,
};

// Th√™m style cho toast
const toastStyle = {
    style: {
        background: '#1E293B',
        color: '#fff',
        border: '1px solid #3B82F6',
        borderRadius: '0.5rem',
        padding: '1rem',
    },
};

const IconSkeleton = () => (
    <div className="text-6xl mb-4 flex justify-center">
        <Skeleton
            width={96}
            height={96}
            baseColor="#1F2937"
            highlightColor="#374151"
            borderRadius={12}
        />
    </div>
);

// Th√™m type cho l·ªãch s·ª≠ game
type GameHistory = {
    playerMove: Choice;
    computerMove: Choice;
    result: GameResult;
}[];

// Th√™m types m·ªõi
type GameStatus = 'waiting' | 'playing' | 'finished';
type OnlineGame = {
    id: string;
    player1_id: string;
    player2_id: string | null;
    player1_choice: Choice | null;
    player2_choice: Choice | null;
    status: GameStatus;
    winner_id: string | null;
    player1_ready: boolean;
    player2_ready: boolean;
};

// Th√™m type m·ªõi
type MatchmakingStatus = 'idle' | 'finding' | 'matched';

// Th√™m type m·ªõi cho role
type PlayerRole = 'player' | 'ai' | null;

// C·∫≠p nh·∫≠t type Score
type Score = {
    player1: number;
    player2: number;
};

export default function RockPaperScissorsGame() {
    const [playerChoice, setPlayerChoice] = useState<Choice | null>(null);
    const [computerChoice, setComputerChoice] = useState<Choice | null>(null);
    const [, setResult] = useState<GameResult>(null);
    const [score, setScore] = useState<Score>({ player1: 0, player2: 0 });
    const [isLoading, setIsLoading] = useState(false);
    const [gameHistory, setGameHistory] = useState<GameHistory>([]);
    const [isOnline, setIsOnline] = useState(false);
    const [currentGame, setCurrentGame] = useState<OnlineGame | null>(null);
    const [playerId] = useState<string>(Math.random().toString(36).substring(7));
    const [supabase, setSupabase] = useState<any>(null);
    const [matchmakingStatus, setMatchmakingStatus] = useState<MatchmakingStatus>('idle');
    const [playerRole, setPlayerRole] = useState<PlayerRole>(null);

    const determineWinner = (player: Choice, computer: Choice): GameResult => {
        if (player === computer) return 'h√≤a';
        if (
            (player === 'b√∫a' && computer === 'k√©o') ||
            (player === 'k√©o' && computer === 'bao') ||
            (player === 'bao' && computer === 'b√∫a')
        ) {
            return 'th·∫Øng';
        }
        return 'thua';
    };

    const getAIChoice = async (): Promise<Choice> => {
        setIsLoading(true);
        try {
            const apiKeyResponse = await fetch('/api/Gemini');
            const apiKeyData = await apiKeyResponse.json();
            if (!apiKeyData.success) {
                throw new Error('Kh√¥ng l·∫•y ƒë∆∞·ª£c kh√≥a API');
            }

            const genAI = new GoogleGenerativeAI(apiKeyData.apiKey);
            const model = genAI.getGenerativeModel({
                model: "gemini-1.5-flash",
                generationConfig: {
                    temperature: 1,
                    topP: 0.95,
                    topK: 40,
                    maxOutputTokens: 8192,
                },
                safetySettings: [
                    {
                        category: HarmCategory.HARM_CATEGORY_HARASSMENT,
                        threshold: HarmBlockThreshold.BLOCK_NONE
                    },
                    {
                        category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,
                        threshold: HarmBlockThreshold.BLOCK_NONE
                    },
                    {
                        category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
                        threshold: HarmBlockThreshold.BLOCK_NONE
                    },
                    {
                        category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
                        threshold: HarmBlockThreshold.BLOCK_NONE
                    }
                ]
            });

            // S·ª≠a l·∫°i prompt ƒë·ªÉ kh√¥ng ti·∫øt l·ªô l·ª±a ch·ªçn hi·ªán t·∫°i
            const historyText = gameHistory
                .slice(-5) // Ch·ªâ l·∫•y 5 l∆∞·ª£t ch∆°i g·∫ßn nh·∫•t
                .map(h => `Ng∆∞·ªùi ch∆°i: ${h.playerMove}, AI: ${h.computerMove}, K·∫øt qu·∫£: ${h.result}`)
                .join('\n');

            const prompt = `B·∫°n l√† AI ch∆°i k√©o b√∫a bao. D·ª±a v√†o l·ªãch s·ª≠ 5 l∆∞·ª£t g·∫ßn nh·∫•t:
${historyText}

H√£y ph√¢n t√≠ch pattern c·ªßa ng∆∞·ªùi ch∆°i v√† ƒë∆∞a ra l·ª±a ch·ªçn th√¥ng minh ƒë·ªÉ th·∫Øng. V√≠ d·ª•:
- N·∫øu ng∆∞·ªùi ch∆°i th∆∞·ªùng ch·ªçn l·∫∑p l·∫°i c√°c n∆∞·ªõc ƒëi
- N·∫øu ng∆∞·ªùi ch∆°i c√≥ xu h∆∞·ªõng thay ƒë·ªïi sau khi thua
- N·∫øu ng∆∞·ªùi ch∆°i th√≠ch d√πng m·ªôt l·ª±a ch·ªçn c·ª• th·ªÉ

CH·ªà TR·∫¢ V·ªÄ m·ªôt trong ba t·ª´: "b√∫a", "k√©o" ho·∫∑c "bao" (kh√¥ng k√®m gi·∫£i th√≠ch).`;

            const result = await model.generateContent(prompt);
            const aiChoice = result.response.text().trim().toLowerCase() as Choice;

            // N·∫øu kh√¥ng c√≥ l·ªãch s·ª≠ ho·∫∑c AI tr·∫£ v·ªÅ kh√¥ng h·ª£p l·ªá, ch·ªçn ng·∫´u nhi√™n
            if (!gameHistory.length || !choices.includes(aiChoice)) {
                return choices[Math.floor(Math.random() * choices.length)];
            }

            return aiChoice;
        } catch (error) {
            console.error('L·ªói khi l·∫•y l·ª±a ch·ªçn c·ªßa AI:', error);
            return choices[Math.floor(Math.random() * choices.length)];
        } finally {
            setIsLoading(false);
        }
    };

    const handleChoice = async (choice: Choice) => {
        if (isOnline && currentGame && supabase) {
            if (playerRole === 'ai') {
                // N·∫øu l√† AI, c·∫≠p nh·∫≠t l·ª±a ch·ªçn v√†o player2_choice
                await supabase
                    .from('games')
                    .update({ player2_choice: choice })
                    .eq('id', currentGame.id);
            } else {
                // N·∫øu l√† ng∆∞·ªùi ch∆°i, c·∫≠p nh·∫≠t l·ª±a ch·ªçn v√†o player1_choice
                await supabase
                    .from('games')
                    .update({ player1_choice: choice })
                    .eq('id', currentGame.id);
            }
            return;
        }
        const computerMove = await getAIChoice();
        setPlayerChoice(choice);
        setComputerChoice(computerMove);

        const gameResult = determineWinner(choice, computerMove);
        setResult(gameResult);

        if (gameResult === 'th·∫Øng') {
            setScore(prev => ({ ...prev, player1: prev.player1 + 1 }));
            toast.success('B·∫°n th·∫Øng! üéâ', toastStyle);
        } else if (gameResult === 'thua') {
            setScore(prev => ({ ...prev, player2: prev.player2 + 1 }));
            toast.error('B·∫°n thua! üò¢', toastStyle);
        } else {
            toast('H√≤a! ü§ù', toastStyle);
        }

        // C·∫≠p nh·∫≠t l·ªãch s·ª≠
        setGameHistory(prev => [...prev, {
            playerMove: choice,
            computerMove: computerMove,
            result: gameResult
        }]);
    };

    const resetGame = () => {
        setPlayerChoice(null);
        setComputerChoice(null);
        setResult(null);
        setScore({ player1: 0, player2: 0 });
        setGameHistory([]); // Reset l·ªãch s·ª≠
    };

    // Th√™m functions ƒë·ªÉ x·ª≠ l√Ω game online
    const createOnlineGame = async () => {
        if (!supabase) {
            toast.error('ƒêang k·∫øt n·ªëi t·ªõi server, vui l√≤ng th·ª≠ l·∫°i');
            return;
        }

        const { data, error } = await supabase
            .from('games')
            .insert({
                player1_id: playerId,
                status: 'waiting'
            })
            .select()
            .single();

        if (error) {
            toast.error('Kh√¥ng th·ªÉ t·∫°o game m·ªõi');
            return;
        }
        setCurrentGame(data);
        setIsOnline(true);
    };

    const joinGame = async () => {
        if (!supabase) {
            toast.error('ƒêang k·∫øt n·ªëi t·ªõi server, vui l√≤ng th·ª≠ l·∫°i');
            return;
        }

        setMatchmakingStatus('finding');
        toast.loading('ƒêang t√¨m ƒë·ªëi th·ªß...', { id: 'finding-match' });

        try {
            const { data: availableGame, error } = await supabase
                .from('games')
                .select('*')
                .eq('status', 'waiting')
                .neq('player1_id', playerId)
                .limit(1)
                .single();

            if (error && error.code !== 'PGRST116') {
                console.error('L·ªói khi t√¨m game:', error);
                toast.error('Kh√¥ng th·ªÉ t√¨m tr·∫≠n ƒë·∫•u', { id: 'finding-match' });
                setMatchmakingStatus('idle');
                return;
            }

            if (availableGame) {
                const { data: updatedGame, error: updateError } = await supabase
                    .from('games')
                    .update({
                        player2_id: playerId,
                        status: 'playing'
                    })
                    .eq('id', availableGame.id)
                    .select()
                    .single();

                if (updateError) {
                    console.error('L·ªói khi tham gia game:', updateError);
                    toast.error('Kh√¥ng th·ªÉ tham gia game', { id: 'finding-match' });
                    setMatchmakingStatus('idle');
                    return;
                }

                setCurrentGame(updatedGame);
                setIsOnline(true);
                setMatchmakingStatus('matched');
                toast.dismiss('finding-match');
                toast.success('ƒê√£ t√¨m th·∫•y ƒë·ªëi th·ªß!');
            } else {
                await createOnlineGame();
            }
        } catch (error) {
            console.error('L·ªói:', error);
            toast.error('ƒê√£ c√≥ l·ªói x·∫£y ra', { id: 'finding-match' });
            setMatchmakingStatus('idle');
        }
    };

    // Th√™m effect ƒë·ªÉ l·∫Øng nghe thay ƒë·ªïi game
    useEffect(() => {
        if (!currentGame || !supabase) return;

        const gameSubscription = supabase
            .channel(`game_${currentGame.id}`)
            .on('postgres_changes', {
                event: '*',
                schema: 'public',
                table: 'games',
                filter: `id=eq.${currentGame.id}`
            }, (payload: any) => {
                const updatedGame = payload.new as OnlineGame;
                setCurrentGame(updatedGame);

                // C·∫≠p nh·∫≠t tr·∫°ng th√°i khi game chuy·ªÉn sang playing
                if (updatedGame.status === 'playing') {
                    setMatchmakingStatus('matched');
                    toast.dismiss('finding-match');
                    toast.success('Tr·∫≠n ƒë·∫•u b·∫Øt ƒë·∫ßu!');
                }
            })
            .subscribe();

        return () => {
            gameSubscription.unsubscribe();
        };
    }, [currentGame, supabase]);

    // Th√™m useEffect ƒë·ªÉ kh·ªüi t·∫°o Supabase client
    useEffect(() => {
        const initSupabase = async () => {
            try {
                const response = await fetch('/api/supabase-key');
                const { url, key } = await response.json();

                if (!url || !key) {
                    toast.error('Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server');
                    return;
                }

                const supabaseClient = createClient(url, key);
                setSupabase(supabaseClient);
            } catch (error) {
                toast.error('L·ªói k·∫øt n·ªëi t·ªõi server');
                console.error(error);
            }
        };

        initSupabase();
    }, []);

    useEffect(() => {
        return () => {
            // Cleanup khi component unmount
            if (currentGame?.status === 'waiting' && currentGame.player1_id === playerId) {
                supabase?.from('games').delete().eq('id', currentGame.id);
            }
        };
    }, [currentGame, playerId, supabase]);

    useEffect(() => {
        if (currentGame?.status === 'playing') {
            // Player1 s·∫Ω l√† ng∆∞·ªùi ch∆°i, Player2 s·∫Ω l√† AI
            const role = currentGame.player1_id === playerId ? 'player' : 'ai';
            setPlayerRole(role);
        }
    }, [currentGame?.status, currentGame?.player1_id, playerId]);

    useEffect(() => {
        if (currentGame?.player1_choice && currentGame?.player2_choice) {
            const result = determineWinner(
                playerRole === 'player' ? currentGame.player1_choice : currentGame.player2_choice,
                playerRole === 'player' ? currentGame.player2_choice : currentGame.player1_choice
            );

            if (result === 'th·∫Øng') {
                setScore(prev => ({
                    ...prev,
                    [playerRole === 'player' ? 'player1' : 'player2']: prev[playerRole === 'player' ? 'player1' : 'player2'] + 1
                }));
                toast.success('B·∫°n th·∫Øng! üéâ', toastStyle);
            } else if (result === 'thua') {
                setScore(prev => ({
                    ...prev,
                    [playerRole === 'player' ? 'player2' : 'player1']: prev[playerRole === 'player' ? 'player2' : 'player1'] + 1
                }));
                toast.error('B·∫°n thua! üò¢', toastStyle);
            } else {
                toast('H√≤a! ü§ù', toastStyle);
            }
        }
    }, [currentGame?.player1_choice, currentGame?.player2_choice]);

    const handleReady = async () => {
        if (!currentGame || !supabase) return;

        const updateData = playerRole === 'player'
            ? { player1_ready: true }
            : { player2_ready: true };

        await supabase
            .from('games')
            .update(updateData)
            .eq('id', currentGame.id);
    };

    const resetOnlineGame = async () => {
        if (!currentGame || !supabase) return;

        if (currentGame.player1_ready && currentGame.player2_ready) {
            await supabase
                .from('games')
                .update({
                    player1_choice: null,
                    player2_choice: null,
                    player1_ready: false,
                    player2_ready: false,
                    status: 'playing'
                })
                .eq('id', currentGame.id);
        }
    };

    // Th√™m useEffect ƒë·ªÉ t·ª± ƒë·ªông reset game khi c·∫£ hai s·∫µn s√†ng
    useEffect(() => {
        if (currentGame?.player1_ready && currentGame?.player2_ready) {
            resetOnlineGame();
        }
    }, [currentGame?.player1_ready, currentGame?.player2_ready]);

    return (
        <div className="bg-[#0F172A] text-white min-h-screen">
            <ModalPortal>
                <Toaster position="top-center" />
            </ModalPortal>

            <div className="bg-[#2A3284] text-center py-4 sm:py-8 mb-4 sm:mb-8 px-2 sm:px-4">
                <h1 className="text-xl sm:text-2xl md:text-3xl font-bold mb-2 sm:mb-4">K√©o B√∫a Bao</h1>
                <p className="text-sm sm:text-base md:text-lg max-w-3xl mx-auto">
                    Ch·ªçn m·ªôt trong ba ƒë·ªÉ ƒë·∫•u v·ªõi AI th√¥ng minh!
                </p>
            </div>

            <div className="container mx-auto px-2 sm:px-4 py-4 sm:py-8">
                <div className="flex flex-wrap justify-center gap-2 sm:gap-4 mb-4 sm:mb-8">
                    {!isOnline ? (
                        <>
                            <button
                                onClick={joinGame}
                                disabled={matchmakingStatus === 'finding'}
                                className={`px-4 py-2 rounded-lg ${matchmakingStatus === 'finding'
                                    ? 'bg-gray-600 cursor-not-allowed'
                                    : 'bg-green-600 hover:bg-green-700'
                                    }`}
                            >
                                {matchmakingStatus === 'finding' ? (
                                    <div className="flex items-center gap-2">
                                        <FaSync className="animate-spin" />
                                        ƒêang t√¨m ƒë·ªëi th·ªß...
                                    </div>
                                ) : (
                                    'Ch∆°i Online'
                                )}
                            </button>

                            <button
                                onClick={resetGame}
                                className="px-4 py-2 rounded-lg bg-red-600 hover:bg-red-700"
                            >
                                Ch∆°i l·∫°i
                            </button>
                        </>
                    ) : (
                        <div className="text-center">
                            {currentGame?.status === 'playing' ? (
                                <p className="mb-2">ƒêang trong tr·∫≠n ƒë·∫•u</p>
                            ) : currentGame?.status === 'waiting' ? (
                                <div className="flex items-center gap-2 justify-center">
                                    <FaSync className="animate-spin" />
                                    ƒêang ch·ªù ng∆∞·ªùi ch∆°i kh√°c tham gia...
                                </div>
                            ) : null}
                        </div>
                    )}

                    {matchmakingStatus === 'finding' && !isOnline && (
                        <button
                            onClick={() => {
                                setMatchmakingStatus('idle');
                                toast.dismiss('finding-match');
                                toast.success('ƒê√£ h·ªßy t√¨m tr·∫≠n');
                            }}
                            className="bg-red-600 hover:bg-red-700 px-4 py-2 rounded-lg"
                        >
                            H·ªßy t√¨m tr·∫≠n
                        </button>
                    )}

                    {isOnline && (
                        <div className="text-center">
                            {currentGame?.status === 'playing' &&
                                !currentGame.player1_choice &&
                                !currentGame.player2_choice && (
                                    <p className="mb-2">L∆∞·ª£t m·ªõi b·∫Øt ƒë·∫ßu!</p>
                                )}
                            {currentGame?.status === 'waiting' && (
                                <div className="flex items-center gap-2 justify-center">
                                    <FaSync className="animate-spin" />
                                    ƒêang ch·ªù ng∆∞·ªùi ch∆°i kh√°c tham gia...
                                </div>
                            )}
                        </div>
                    )}

                    {isOnline && currentGame?.player1_choice && currentGame?.player2_choice && (
                        <>
                            <button
                                onClick={handleReady}
                                disabled={
                                    (playerRole === 'player' && currentGame.player1_ready) ||
                                    (playerRole === 'ai' && currentGame.player2_ready)
                                }
                                className={`flex items-center gap-2 px-4 py-2 rounded-lg ${(playerRole === 'player' && currentGame.player1_ready) ||
                                    (playerRole === 'ai' && currentGame.player2_ready)
                                    ? 'bg-gray-600 cursor-not-allowed'
                                    : 'bg-blue-600 hover:bg-blue-700'
                                    }`}
                            >
                                {(playerRole === 'player' && currentGame.player1_ready) ||
                                    (playerRole === 'ai' && currentGame.player2_ready)
                                    ? 'ƒê√£ s·∫µn s√†ng'
                                    : 'S·∫µn s√†ng ch∆°i l·∫°i'}
                            </button>

                            <div className="text-sm text-gray-400">
                                {playerRole === 'player' ? (
                                    currentGame.player2_ready ? 'ƒê·ªëi th·ªß ƒë√£ s·∫µn s√†ng' : 'ƒêang ƒë·ª£i ƒë·ªëi th·ªß s·∫µn s√†ng...'
                                ) : (
                                    currentGame.player1_ready ? 'ƒê·ªëi th·ªß ƒë√£ s·∫µn s√†ng' : 'ƒêang ƒë·ª£i ƒë·ªëi th·ªß s·∫µn s√†ng...'
                                )}
                            </div>
                        </>
                    )}
                </div>

                <div className="text-center mb-4 sm:mb-8">
                    <div className="text-base sm:text-xl font-bold">
                        {isOnline ? (
                            `T·ªâ s·ªë: ${playerRole === 'player' ? 'B·∫°n' : 'ƒê·ªëi th·ªß'} ${score.player1} - ${score.player2} ${playerRole === 'player' ? 'ƒê·ªëi th·ªß' : 'B·∫°n'}`
                        ) : (
                            `T·ªâ s·ªë: B·∫°n ${score.player1} - ${score.player2} AI`
                        )}
                    </div>
                </div>

                <div className="grid grid-cols-2 gap-4 sm:gap-8 max-w-4xl mx-auto mb-4 sm:mb-8">
                    <div className="text-center">
                        <h2 className="text-xl font-bold mb-4">
                            {isOnline ? (playerRole === 'player' ? 'B·∫°n' : 'ƒê·ªëi th·ªß') : 'B·∫°n'}
                        </h2>
                        {isLoading ? (
                            <IconSkeleton />
                        ) : (
                            <motion.div
                                className="text-6xl mb-4"
                                initial={{ scale: 0 }}
                                animate={{
                                    scale: isOnline
                                        ? (currentGame?.player1_choice && currentGame?.player2_choice ? 1 : 0)
                                        : Boolean(playerChoice) ? 1 : 0
                                }}
                                transition={{ type: "spring", stiffness: 260, damping: 20 }}
                            >
                                {isOnline ?
                                    (playerRole === 'player' ?
                                        (currentGame?.player1_choice && currentGame?.player2_choice) &&
                                        choiceIcons[currentGame.player1_choice]?.({ className: "mx-auto" }) :
                                        (currentGame?.player1_choice && currentGame?.player2_choice) &&
                                        choiceIcons[currentGame.player2_choice]?.({ className: "mx-auto" })
                                    ) :
                                    playerChoice && choiceIcons[playerChoice]?.({ className: "mx-auto" })
                                }
                            </motion.div>
                        )}
                        {isOnline && ((playerRole === 'player' && currentGame?.player1_choice) ||
                            (playerRole === 'ai' && currentGame?.player2_choice)) &&
                            !(currentGame?.player1_choice && currentGame?.player2_choice) && (
                                <p className="text-green-500">ƒê√£ ch·ªçn xong</p>
                            )}
                    </div>

                    <div className="text-center">
                        <h2 className="text-xl font-bold mb-4">
                            {isOnline ? (playerRole === 'ai' ? 'B·∫°n' : 'ƒê·ªëi th·ªß') : 'AI'}
                        </h2>
                        {isLoading ? (
                            <IconSkeleton />
                        ) : (
                            <motion.div
                                className="text-6xl mb-4"
                                initial={{ scale: 0 }}
                                animate={{
                                    scale: isOnline
                                        ? (currentGame?.player1_choice && currentGame?.player2_choice ? 1 : 0)
                                        : Boolean(computerChoice) ? 1 : 0
                                }}
                                transition={{ type: "spring", stiffness: 260, damping: 20 }}
                            >
                                {isOnline ?
                                    (playerRole === 'ai' ?
                                        (currentGame?.player1_choice && currentGame?.player2_choice) &&
                                        choiceIcons[currentGame.player1_choice]?.({ className: "mx-auto" }) :
                                        (currentGame?.player1_choice && currentGame?.player2_choice) &&
                                        choiceIcons[currentGame.player2_choice]?.({ className: "mx-auto" })
                                    ) :
                                    computerChoice && choiceIcons[computerChoice]?.({ className: "mx-auto" })
                                }
                            </motion.div>
                        )}
                        {isOnline && ((playerRole === 'player' && currentGame?.player2_choice) ||
                            (playerRole === 'ai' && currentGame?.player1_choice)) &&
                            !(currentGame?.player1_choice && currentGame?.player2_choice) && (
                                <p className="text-green-500">ƒê√£ ch·ªçn xong</p>
                            )}
                    </div>
                </div>

                <div className="grid grid-cols-3 gap-2 sm:gap-4 max-w-2xl mx-auto">
                    {choices.map((choice) => {
                        const Icon = choiceIcons[choice];
                        const isDisabled = isLoading ||
                            (isOnline && currentGame?.status !== 'playing') ||
                            (isOnline && ((playerRole === 'player' && currentGame?.player1_choice) ||
                                (playerRole === 'ai' && currentGame?.player2_choice)));

                        return (
                            <motion.button
                                key={choice}
                                whileHover={{ scale: isDisabled ? 1 : 1.05 }}
                                whileTap={{ scale: isDisabled ? 1 : 0.95 }}
                                onClick={() => handleChoice(choice)}
                                disabled={isDisabled as boolean}
                                className={`p-3 sm:p-6 rounded-lg transition-all ${isDisabled
                                    ? 'bg-gray-700 opacity-50 cursor-not-allowed'
                                    : 'bg-purple-600 hover:bg-purple-700'
                                    } flex flex-col items-center gap-1 sm:gap-2`}
                            >
                                <Icon className={`text-2xl sm:text-4xl ${isLoading ? 'animate-pulse' : ''}`} />
                                <span className="capitalize text-sm sm:text-base">{choice}</span>
                            </motion.button>
                        );
                    })}
                </div>
            </div>
        </div>
    );
}
